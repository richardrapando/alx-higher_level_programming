===========================
How to use 0-add_integer.py
===========================

This module defines the integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 1)
    3

::

    >>> add_integer(2, -4)
    -2

The function works with floating-point values as well.

::

    >>> add_integer(2.0, 1.0)
    3

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(2.6, 0.2)
    2

::

    >>> add_integer(-2.6, -0.2)
    -2

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.6, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` assumes both arguments are either integers or floats.
If either argument is a non-float and non-integer, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-floats and non-integers, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

function fails if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
